// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BlogPage should do initial render 1`] = `
<BlogPage>
  <div
    className="makeStyles-root-1"
  >
    <WithStyles(CssBaseline)>
      <CssBaseline
        classes={Object {}}
      />
    </WithStyles(CssBaseline)>
    <WithStyles(ForwardRef(AppBar))
      className="makeStyles-appBar-4"
      position="fixed"
    >
      <ForwardRef(AppBar)
        className="makeStyles-appBar-4"
        classes={
          Object {
            "colorDefault": "MuiAppBar-colorDefault",
            "colorInherit": "MuiAppBar-colorInherit",
            "colorPrimary": "MuiAppBar-colorPrimary",
            "colorSecondary": "MuiAppBar-colorSecondary",
            "colorTransparent": "MuiAppBar-colorTransparent",
            "positionAbsolute": "MuiAppBar-positionAbsolute",
            "positionFixed": "MuiAppBar-positionFixed",
            "positionRelative": "MuiAppBar-positionRelative",
            "positionStatic": "MuiAppBar-positionStatic",
            "positionSticky": "MuiAppBar-positionSticky",
            "root": "MuiAppBar-root",
          }
        }
        position="fixed"
      >
        <WithStyles(ForwardRef(Paper))
          className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary makeStyles-appBar-4 mui-fixed"
          component="header"
          elevation={4}
          square={true}
        >
          <ForwardRef(Paper)
            className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary makeStyles-appBar-4 mui-fixed"
            classes={
              Object {
                "elevation0": "MuiPaper-elevation0",
                "elevation1": "MuiPaper-elevation1",
                "elevation10": "MuiPaper-elevation10",
                "elevation11": "MuiPaper-elevation11",
                "elevation12": "MuiPaper-elevation12",
                "elevation13": "MuiPaper-elevation13",
                "elevation14": "MuiPaper-elevation14",
                "elevation15": "MuiPaper-elevation15",
                "elevation16": "MuiPaper-elevation16",
                "elevation17": "MuiPaper-elevation17",
                "elevation18": "MuiPaper-elevation18",
                "elevation19": "MuiPaper-elevation19",
                "elevation2": "MuiPaper-elevation2",
                "elevation20": "MuiPaper-elevation20",
                "elevation21": "MuiPaper-elevation21",
                "elevation22": "MuiPaper-elevation22",
                "elevation23": "MuiPaper-elevation23",
                "elevation24": "MuiPaper-elevation24",
                "elevation3": "MuiPaper-elevation3",
                "elevation4": "MuiPaper-elevation4",
                "elevation5": "MuiPaper-elevation5",
                "elevation6": "MuiPaper-elevation6",
                "elevation7": "MuiPaper-elevation7",
                "elevation8": "MuiPaper-elevation8",
                "elevation9": "MuiPaper-elevation9",
                "outlined": "MuiPaper-outlined",
                "root": "MuiPaper-root",
                "rounded": "MuiPaper-rounded",
              }
            }
            component="header"
            elevation={4}
            square={true}
          >
            <header
              className="MuiPaper-root MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary makeStyles-appBar-4 mui-fixed MuiPaper-elevation4"
            >
              <WithStyles(ForwardRef(Toolbar))
                className="makeStyles-toolbarContent-9"
              >
                <ForwardRef(Toolbar)
                  className="makeStyles-toolbarContent-9"
                  classes={
                    Object {
                      "dense": "MuiToolbar-dense",
                      "gutters": "MuiToolbar-gutters",
                      "regular": "MuiToolbar-regular",
                      "root": "MuiToolbar-root",
                    }
                  }
                >
                  <div
                    className="MuiToolbar-root MuiToolbar-regular makeStyles-toolbarContent-9 MuiToolbar-gutters"
                  >
                    <WithStyles(ForwardRef(IconButton))
                      aria-label="open drawer"
                      className="makeStyles-menuButton-6"
                      color="inherit"
                      edge="start"
                      onClick={[Function]}
                    >
                      <ForwardRef(IconButton)
                        aria-label="open drawer"
                        className="makeStyles-menuButton-6"
                        classes={
                          Object {
                            "colorInherit": "MuiIconButton-colorInherit",
                            "colorPrimary": "MuiIconButton-colorPrimary",
                            "colorSecondary": "MuiIconButton-colorSecondary",
                            "disabled": "Mui-disabled",
                            "edgeEnd": "MuiIconButton-edgeEnd",
                            "edgeStart": "MuiIconButton-edgeStart",
                            "label": "MuiIconButton-label",
                            "root": "MuiIconButton-root",
                            "sizeSmall": "MuiIconButton-sizeSmall",
                          }
                        }
                        color="inherit"
                        edge="start"
                        onClick={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="open drawer"
                          centerRipple={true}
                          className="MuiIconButton-root makeStyles-menuButton-6 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                          disabled={false}
                          focusRipple={true}
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="open drawer"
                            centerRipple={true}
                            className="MuiIconButton-root makeStyles-menuButton-6 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusRipple={true}
                            onClick={[Function]}
                          >
                            <button
                              aria-label="open drawer"
                              className="MuiButtonBase-root MuiIconButton-root makeStyles-menuButton-6 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              <span
                                className="MuiIconButton-label"
                              >
                                <ForwardRef(MenuOutlinedIcon)>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                          "colorError": "MuiSvgIcon-colorError",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                          "root": "MuiSvgIcon-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="MuiSvgIcon-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef(MenuOutlinedIcon)>
                              </span>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(IconButton)>
                    </WithStyles(ForwardRef(IconButton))>
                    <WithStyles(ForwardRef(IconButton))
                      aria-label="open search"
                      className="makeStyles-searchButton-7"
                      color="primary"
                    >
                      <ForwardRef(IconButton)
                        aria-label="open search"
                        className="makeStyles-searchButton-7"
                        classes={
                          Object {
                            "colorInherit": "MuiIconButton-colorInherit",
                            "colorPrimary": "MuiIconButton-colorPrimary",
                            "colorSecondary": "MuiIconButton-colorSecondary",
                            "disabled": "Mui-disabled",
                            "edgeEnd": "MuiIconButton-edgeEnd",
                            "edgeStart": "MuiIconButton-edgeStart",
                            "label": "MuiIconButton-label",
                            "root": "MuiIconButton-root",
                            "sizeSmall": "MuiIconButton-sizeSmall",
                          }
                        }
                        color="primary"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="open search"
                          centerRipple={true}
                          className="MuiIconButton-root makeStyles-searchButton-7 MuiIconButton-colorPrimary"
                          disabled={false}
                          focusRipple={true}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="open search"
                            centerRipple={true}
                            className="MuiIconButton-root makeStyles-searchButton-7 MuiIconButton-colorPrimary"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusRipple={true}
                          >
                            <button
                              aria-label="open search"
                              className="MuiButtonBase-root MuiIconButton-root makeStyles-searchButton-7 MuiIconButton-colorPrimary"
                              disabled={false}
                              onBlur={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              <span
                                className="MuiIconButton-label"
                              >
                                <ForwardRef(SearchOutlinedIcon)>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                          "colorError": "MuiSvgIcon-colorError",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                          "root": "MuiSvgIcon-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="MuiSvgIcon-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef(SearchOutlinedIcon)>
                              </span>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(IconButton)>
                    </WithStyles(ForwardRef(IconButton))>
                    <WithStyles(ForwardRef(Tabs))
                      aria-label="Menu bar"
                      scrollButtons="auto"
                      value={0}
                      variant="scrollable"
                    >
                      <ForwardRef(Tabs)
                        aria-label="Menu bar"
                        classes={
                          Object {
                            "centered": "MuiTabs-centered",
                            "fixed": "MuiTabs-fixed",
                            "flexContainer": "MuiTabs-flexContainer",
                            "flexContainerVertical": "MuiTabs-flexContainerVertical",
                            "indicator": "MuiTabs-indicator",
                            "root": "MuiTabs-root",
                            "scrollButtons": "MuiTabs-scrollButtons",
                            "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                            "scrollable": "MuiTabs-scrollable",
                            "scroller": "MuiTabs-scroller",
                            "vertical": "MuiTabs-vertical",
                          }
                        }
                        scrollButtons="auto"
                        value={0}
                        variant="scrollable"
                      >
                        <div
                          className="MuiTabs-root"
                        >
                          <ScrollbarSize
                            className="MuiTabs-scrollable"
                            onChange={[Function]}
                          >
                            <div
                              className="MuiTabs-scrollable"
                              style={
                                Object {
                                  "height": 99,
                                  "overflow": "scroll",
                                  "position": "absolute",
                                  "top": -9999,
                                  "width": 99,
                                }
                              }
                            />
                          </ScrollbarSize>
                          <div
                            className="MuiTabs-scroller MuiTabs-scrollable"
                            onScroll={[Function]}
                            style={
                              Object {
                                "marginBottom": null,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <div
                              aria-label="Menu bar"
                              className="MuiTabs-flexContainer"
                              onKeyDown={[Function]}
                              role="tablist"
                            >
                              <WithStyles(ForwardRef(Tab))
                                fullWidth={false}
                                indicator={
                                  <WithStyles(ForwardRef(TabIndicator))
                                    className="MuiTabs-indicator"
                                    color="secondary"
                                    orientation="horizontal"
                                    style={Object {}}
                                  />
                                }
                                key=".0"
                                label="Blog"
                                selected={true}
                                textColor="inherit"
                                value={0}
                              >
                                <ForwardRef(Tab)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "fullWidth": "MuiTab-fullWidth",
                                      "labelIcon": "MuiTab-labelIcon",
                                      "root": "MuiTab-root",
                                      "selected": "Mui-selected",
                                      "textColorInherit": "MuiTab-textColorInherit",
                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                      "wrapped": "MuiTab-wrapped",
                                      "wrapper": "MuiTab-wrapper",
                                    }
                                  }
                                  fullWidth={false}
                                  indicator={
                                    <WithStyles(ForwardRef(TabIndicator))
                                      className="MuiTabs-indicator"
                                      color="secondary"
                                      orientation="horizontal"
                                      style={Object {}}
                                    />
                                  }
                                  label="Blog"
                                  selected={true}
                                  textColor="inherit"
                                  value={0}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-selected={true}
                                    className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-selected={true}
                                      className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      role="tab"
                                      tabIndex={0}
                                    >
                                      <button
                                        aria-selected={true}
                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="tab"
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiTab-wrapper"
                                        >
                                          Blog
                                        </span>
                                        <WithStyles(ForwardRef(TabIndicator))
                                          className="MuiTabs-indicator"
                                          color="secondary"
                                          orientation="horizontal"
                                          style={Object {}}
                                        >
                                          <ForwardRef(TabIndicator)
                                            className="MuiTabs-indicator"
                                            classes={
                                              Object {
                                                "colorPrimary": "PrivateTabIndicator-colorPrimary-47",
                                                "colorSecondary": "PrivateTabIndicator-colorSecondary-48",
                                                "root": "PrivateTabIndicator-root-46",
                                                "vertical": "PrivateTabIndicator-vertical-49",
                                              }
                                            }
                                            color="secondary"
                                            orientation="horizontal"
                                            style={Object {}}
                                          >
                                            <span
                                              className="PrivateTabIndicator-root-46 PrivateTabIndicator-colorSecondary-48 MuiTabs-indicator"
                                              style={Object {}}
                                            />
                                          </ForwardRef(TabIndicator)>
                                        </WithStyles(ForwardRef(TabIndicator))>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Tab)>
                              </WithStyles(ForwardRef(Tab))>
                              <WithStyles(ForwardRef(Tab))
                                fullWidth={false}
                                indicator={false}
                                key=".1"
                                label="Questions"
                                selected={false}
                                textColor="inherit"
                                value={1}
                              >
                                <ForwardRef(Tab)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "fullWidth": "MuiTab-fullWidth",
                                      "labelIcon": "MuiTab-labelIcon",
                                      "root": "MuiTab-root",
                                      "selected": "Mui-selected",
                                      "textColorInherit": "MuiTab-textColorInherit",
                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                      "wrapped": "MuiTab-wrapped",
                                      "wrapper": "MuiTab-wrapper",
                                    }
                                  }
                                  fullWidth={false}
                                  indicator={false}
                                  label="Questions"
                                  selected={false}
                                  textColor="inherit"
                                  value={1}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-selected={false}
                                    className="MuiTab-root MuiTab-textColorInherit"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={-1}
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-selected={false}
                                      className="MuiTab-root MuiTab-textColorInherit"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      role="tab"
                                      tabIndex={-1}
                                    >
                                      <button
                                        aria-selected={false}
                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="tab"
                                        tabIndex={-1}
                                        type="button"
                                      >
                                        <span
                                          className="MuiTab-wrapper"
                                        >
                                          Questions
                                        </span>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Tab)>
                              </WithStyles(ForwardRef(Tab))>
                              <WithStyles(ForwardRef(Tab))
                                fullWidth={false}
                                indicator={false}
                                key=".2"
                                label="Company"
                                selected={false}
                                textColor="inherit"
                                value={2}
                              >
                                <ForwardRef(Tab)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "fullWidth": "MuiTab-fullWidth",
                                      "labelIcon": "MuiTab-labelIcon",
                                      "root": "MuiTab-root",
                                      "selected": "Mui-selected",
                                      "textColorInherit": "MuiTab-textColorInherit",
                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                      "wrapped": "MuiTab-wrapped",
                                      "wrapper": "MuiTab-wrapper",
                                    }
                                  }
                                  fullWidth={false}
                                  indicator={false}
                                  label="Company"
                                  selected={false}
                                  textColor="inherit"
                                  value={2}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-selected={false}
                                    className="MuiTab-root MuiTab-textColorInherit"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={-1}
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-selected={false}
                                      className="MuiTab-root MuiTab-textColorInherit"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      role="tab"
                                      tabIndex={-1}
                                    >
                                      <button
                                        aria-selected={false}
                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="tab"
                                        tabIndex={-1}
                                        type="button"
                                      >
                                        <span
                                          className="MuiTab-wrapper"
                                        >
                                          Company
                                        </span>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Tab)>
                              </WithStyles(ForwardRef(Tab))>
                              <WithStyles(ForwardRef(Tab))
                                fullWidth={false}
                                indicator={false}
                                key=".3"
                                label="Contact"
                                selected={false}
                                textColor="inherit"
                                value={3}
                              >
                                <ForwardRef(Tab)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "fullWidth": "MuiTab-fullWidth",
                                      "labelIcon": "MuiTab-labelIcon",
                                      "root": "MuiTab-root",
                                      "selected": "Mui-selected",
                                      "textColorInherit": "MuiTab-textColorInherit",
                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                      "wrapped": "MuiTab-wrapped",
                                      "wrapper": "MuiTab-wrapper",
                                    }
                                  }
                                  fullWidth={false}
                                  indicator={false}
                                  label="Contact"
                                  selected={false}
                                  textColor="inherit"
                                  value={3}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-selected={false}
                                    className="MuiTab-root MuiTab-textColorInherit"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={-1}
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-selected={false}
                                      className="MuiTab-root MuiTab-textColorInherit"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      role="tab"
                                      tabIndex={-1}
                                    >
                                      <button
                                        aria-selected={false}
                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="tab"
                                        tabIndex={-1}
                                        type="button"
                                      >
                                        <span
                                          className="MuiTab-wrapper"
                                        >
                                          Contact
                                        </span>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Tab)>
                              </WithStyles(ForwardRef(Tab))>
                            </div>
                          </div>
                        </div>
                      </ForwardRef(Tabs)>
                    </WithStyles(ForwardRef(Tabs))>
                    <div
                      className="makeStyles-barIcons-11"
                    >
                      <ForwardRef(SettingsOutlinedIcon)
                        className="makeStyles-settingsIcon-13"
                      >
                        <WithStyles(ForwardRef(SvgIcon))
                          className="makeStyles-settingsIcon-13"
                        >
                          <ForwardRef(SvgIcon)
                            className="makeStyles-settingsIcon-13"
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden={true}
                              className="MuiSvgIcon-root makeStyles-settingsIcon-13"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M19.43 12.98c.04-.32.07-.64.07-.98 0-.34-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.09-.16-.26-.25-.44-.25-.06 0-.12.01-.17.03l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.06-.02-.12-.03-.18-.03-.17 0-.34.09-.43.25l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98 0 .33.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.09.16.26.25.44.25.06 0 .12-.01.17-.03l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.06.02.12.03.18.03.17 0 .34-.09.43-.25l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zm-1.98-1.71c.04.31.05.52.05.73 0 .21-.02.43-.05.73l-.14 1.13.89.7 1.08.84-.7 1.21-1.27-.51-1.04-.42-.9.68c-.43.32-.84.56-1.25.73l-1.06.43-.16 1.13-.2 1.35h-1.4l-.19-1.35-.16-1.13-1.06-.43c-.43-.18-.83-.41-1.23-.71l-.91-.7-1.06.43-1.27.51-.7-1.21 1.08-.84.89-.7-.14-1.13c-.03-.31-.05-.54-.05-.74s.02-.43.05-.73l.14-1.13-.89-.7-1.08-.84.7-1.21 1.27.51 1.04.42.9-.68c.43-.32.84-.56 1.25-.73l1.06-.43.16-1.13.2-1.35h1.39l.19 1.35.16 1.13 1.06.43c.43.18.83.41 1.23.71l.91.7 1.06-.43 1.27-.51.7 1.21-1.07.85-.89.7.14 1.13zM12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef(SettingsOutlinedIcon)>
                      <WithStyles(ForwardRef(Badge))
                        badgeContent={4}
                        className="makeStyles-mailIcon-12"
                        color="primary"
                      >
                        <ForwardRef(Badge)
                          badgeContent={4}
                          className="makeStyles-mailIcon-12"
                          classes={
                            Object {
                              "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
                              "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
                              "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
                              "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
                              "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
                              "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
                              "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
                              "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
                              "badge": "MuiBadge-badge",
                              "colorError": "MuiBadge-colorError",
                              "colorPrimary": "MuiBadge-colorPrimary",
                              "colorSecondary": "MuiBadge-colorSecondary",
                              "dot": "MuiBadge-dot",
                              "invisible": "MuiBadge-invisible",
                              "root": "MuiBadge-root",
                            }
                          }
                          color="primary"
                        >
                          <span
                            className="MuiBadge-root makeStyles-mailIcon-12"
                          >
                            <ForwardRef(MailOutlineOutlinedIcon)>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(MailOutlineOutlinedIcon)>
                            <span
                              className="MuiBadge-badge MuiBadge-anchorOriginTopRightRectangle MuiBadge-colorPrimary"
                            >
                              4
                            </span>
                          </span>
                        </ForwardRef(Badge)>
                      </WithStyles(ForwardRef(Badge))>
                      <ForwardRef(ExitToAppOutlinedIcon)
                        className="makeStyles-logoutIcon-14"
                      >
                        <WithStyles(ForwardRef(SvgIcon))
                          className="makeStyles-logoutIcon-14"
                        >
                          <ForwardRef(SvgIcon)
                            className="makeStyles-logoutIcon-14"
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden={true}
                              className="MuiSvgIcon-root makeStyles-logoutIcon-14"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef(ExitToAppOutlinedIcon)>
                    </div>
                  </div>
                </ForwardRef(Toolbar)>
              </WithStyles(ForwardRef(Toolbar))>
            </header>
          </ForwardRef(Paper)>
        </WithStyles(ForwardRef(Paper))>
      </ForwardRef(AppBar)>
    </WithStyles(ForwardRef(AppBar))>
    <nav
      className="makeStyles-drawer-2"
    >
      <Hidden
        implementation="css"
        smUp={true}
      >
        <WithStyles(HiddenCss)
          lgDown={false}
          lgUp={false}
          mdDown={false}
          mdUp={false}
          smDown={false}
          smUp={true}
          xlDown={false}
          xlUp={false}
          xsDown={false}
          xsUp={false}
        >
          <HiddenCss
            classes={
              Object {
                "lgDown": "PrivateHiddenCss-lgDown-61",
                "lgUp": "PrivateHiddenCss-lgUp-60",
                "mdDown": "PrivateHiddenCss-mdDown-58",
                "mdUp": "PrivateHiddenCss-mdUp-57",
                "onlyLg": "PrivateHiddenCss-onlyLg-59",
                "onlyMd": "PrivateHiddenCss-onlyMd-56",
                "onlySm": "PrivateHiddenCss-onlySm-53",
                "onlyXl": "PrivateHiddenCss-onlyXl-62",
                "onlyXs": "PrivateHiddenCss-onlyXs-50",
                "smDown": "PrivateHiddenCss-smDown-55",
                "smUp": "PrivateHiddenCss-smUp-54",
                "xlDown": "PrivateHiddenCss-xlDown-64",
                "xlUp": "PrivateHiddenCss-xlUp-63",
                "xsDown": "PrivateHiddenCss-xsDown-52",
                "xsUp": "PrivateHiddenCss-xsUp-51",
              }
            }
            lgDown={false}
            lgUp={false}
            mdDown={false}
            mdUp={false}
            smDown={false}
            smUp={true}
            xlDown={false}
            xlUp={false}
            xsDown={false}
            xsUp={false}
          >
            <div
              className="PrivateHiddenCss-smUp-54"
            >
              <WithStyles(ForwardRef(Drawer))
                ModalProps={
                  Object {
                    "keepMounted": true,
                  }
                }
                classes={
                  Object {
                    "paper": "makeStyles-drawerPaper-3",
                  }
                }
                onClose={[Function]}
                open={false}
                variant="temporary"
              >
                <ForwardRef(Drawer)
                  ModalProps={
                    Object {
                      "keepMounted": true,
                    }
                  }
                  classes={
                    Object {
                      "docked": "MuiDrawer-docked",
                      "modal": "MuiDrawer-modal",
                      "paper": "MuiDrawer-paper makeStyles-drawerPaper-3",
                      "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
                      "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
                      "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
                      "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
                      "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
                      "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
                      "paperAnchorRight": "MuiDrawer-paperAnchorRight",
                      "paperAnchorTop": "MuiDrawer-paperAnchorTop",
                      "root": "MuiDrawer-root",
                    }
                  }
                  onClose={[Function]}
                  open={false}
                  variant="temporary"
                >
                  <ForwardRef(Modal)
                    BackdropComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Naked": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "invisible": [Function],
                            "open": [Function],
                            "transitionDuration": [Function],
                          },
                          "render": [Function],
                        },
                        "options": Object {
                          "defaultTheme": Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "success": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#388e3c",
                                "light": "#81c784",
                                "main": "#4caf50",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#f57c00",
                                "light": "#ffb74d",
                                "main": "#ff9800",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                          },
                          "name": "MuiBackdrop",
                        },
                        "propTypes": Object {
                          "classes": [Function],
                          "innerRef": [Function],
                        },
                        "render": [Function],
                        "useStyles": [Function],
                      }
                    }
                    BackdropProps={
                      Object {
                        "transitionDuration": Object {
                          "enter": 225,
                          "exit": 195,
                        },
                      }
                    }
                    className="MuiDrawer-root MuiDrawer-modal"
                    keepMounted={true}
                    onClose={[Function]}
                    open={false}
                  >
                    <ForwardRef(Portal)
                      disablePortal={false}
                    />
                  </ForwardRef(Modal)>
                </ForwardRef(Drawer)>
              </WithStyles(ForwardRef(Drawer))>
            </div>
          </HiddenCss>
        </WithStyles(HiddenCss)>
      </Hidden>
      <Hidden
        implementation="css"
        xsDown={true}
      >
        <WithStyles(HiddenCss)
          lgDown={false}
          lgUp={false}
          mdDown={false}
          mdUp={false}
          smDown={false}
          smUp={false}
          xlDown={false}
          xlUp={false}
          xsDown={true}
          xsUp={false}
        >
          <HiddenCss
            classes={
              Object {
                "lgDown": "PrivateHiddenCss-lgDown-61",
                "lgUp": "PrivateHiddenCss-lgUp-60",
                "mdDown": "PrivateHiddenCss-mdDown-58",
                "mdUp": "PrivateHiddenCss-mdUp-57",
                "onlyLg": "PrivateHiddenCss-onlyLg-59",
                "onlyMd": "PrivateHiddenCss-onlyMd-56",
                "onlySm": "PrivateHiddenCss-onlySm-53",
                "onlyXl": "PrivateHiddenCss-onlyXl-62",
                "onlyXs": "PrivateHiddenCss-onlyXs-50",
                "smDown": "PrivateHiddenCss-smDown-55",
                "smUp": "PrivateHiddenCss-smUp-54",
                "xlDown": "PrivateHiddenCss-xlDown-64",
                "xlUp": "PrivateHiddenCss-xlUp-63",
                "xsDown": "PrivateHiddenCss-xsDown-52",
                "xsUp": "PrivateHiddenCss-xsUp-51",
              }
            }
            lgDown={false}
            lgUp={false}
            mdDown={false}
            mdUp={false}
            smDown={false}
            smUp={false}
            xlDown={false}
            xlUp={false}
            xsDown={true}
            xsUp={false}
          >
            <div
              className="PrivateHiddenCss-xsDown-52"
            >
              <div>
                <div
                  className="makeStyles-sidebar-15"
                >
                  <div
                    className="makeStyles-sidebarItem-16"
                  >
                    <WithStyles(ForwardRef(Avatar))
                      classes={
                        Object {
                          "root": "makeStyles-avatarPicture-19",
                        }
                      }
                    >
                      <ForwardRef(Avatar)
                        classes={
                          Object {
                            "circle": "MuiAvatar-circle",
                            "circular": "MuiAvatar-circular",
                            "colorDefault": "MuiAvatar-colorDefault",
                            "fallback": "MuiAvatar-fallback",
                            "img": "MuiAvatar-img",
                            "root": "MuiAvatar-root makeStyles-avatarPicture-19",
                            "rounded": "MuiAvatar-rounded",
                            "square": "MuiAvatar-square",
                          }
                        }
                      >
                        <div
                          className="MuiAvatar-root makeStyles-avatarPicture-19 MuiAvatar-circle MuiAvatar-colorDefault"
                        >
                          <ForwardRef(PersonIcon)
                            className="MuiAvatar-fallback"
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              className="MuiAvatar-fallback"
                            >
                              <ForwardRef(SvgIcon)
                                className="MuiAvatar-fallback"
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden={true}
                                  className="MuiSvgIcon-root MuiAvatar-fallback"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef(PersonIcon)>
                        </div>
                      </ForwardRef(Avatar)>
                    </WithStyles(ForwardRef(Avatar))>
                    <div
                      className="makeStyles-avatarDescription-21"
                    >
                      <div
                        className="makeStyles-avatarName-22"
                      >
                        Devinder Kumar
                      </div>
                      <div
                        className="makeStyles-avatarDesignation-23"
                      >
                        Chief Officer
                      </div>
                    </div>
                    <WithStyles(ForwardRef(Button))
                      className="makeStyles-avatarButton-20"
                      variant="outlined"
                    >
                      <ForwardRef(Button)
                        className="makeStyles-avatarButton-20"
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit",
                            "contained": "MuiButton-contained",
                            "containedPrimary": "MuiButton-containedPrimary",
                            "containedSecondary": "MuiButton-containedSecondary",
                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                            "disableElevation": "MuiButton-disableElevation",
                            "disabled": "Mui-disabled",
                            "endIcon": "MuiButton-endIcon",
                            "focusVisible": "Mui-focusVisible",
                            "fullWidth": "MuiButton-fullWidth",
                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                            "label": "MuiButton-label",
                            "outlined": "MuiButton-outlined",
                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                            "root": "MuiButton-root",
                            "sizeLarge": "MuiButton-sizeLarge",
                            "sizeSmall": "MuiButton-sizeSmall",
                            "startIcon": "MuiButton-startIcon",
                            "text": "MuiButton-text",
                            "textPrimary": "MuiButton-textPrimary",
                            "textSecondary": "MuiButton-textSecondary",
                            "textSizeLarge": "MuiButton-textSizeLarge",
                            "textSizeSmall": "MuiButton-textSizeSmall",
                          }
                        }
                        variant="outlined"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiButton-root MuiButton-outlined makeStyles-avatarButton-20"
                          component="button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          type="button"
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiButton-root MuiButton-outlined makeStyles-avatarButton-20"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="button"
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-avatarButton-20"
                              disabled={false}
                              onBlur={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              <span
                                className="MuiButton-label"
                              >
                                Update Profile
                              </span>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Button)>
                    </WithStyles(ForwardRef(Button))>
                  </div>
                  <div
                    className="makeStyles-sidebarItem-16"
                  >
                    <ForwardRef(LaptopMacOutlinedIcon)
                      className="makeStyles-sidebarListIcons-24"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="makeStyles-sidebarListIcons-24"
                      >
                        <ForwardRef(SvgIcon)
                          className="makeStyles-sidebarListIcons-24"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root makeStyles-sidebarListIcons-24"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M20 18c1.1 0 1.99-.9 1.99-2L22 5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2H0c0 1.1.9 2 2 2h20c1.1 0 2-.9 2-2h-4zM4 5h16v11H4V5zm8 14c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(LaptopMacOutlinedIcon)>
                    DashBoard
                  </div>
                  <div
                    className="makeStyles-activeSidebarItem-17"
                  >
                    <ForwardRef(ListAltOutlinedIcon)
                      className="makeStyles-sidebarListIcons-24"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="makeStyles-sidebarListIcons-24"
                      >
                        <ForwardRef(SvgIcon)
                          className="makeStyles-sidebarListIcons-24"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root makeStyles-sidebarListIcons-24"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M11 7h6v2h-6zm0 4h6v2h-6zm0 4h6v2h-6zM7 7h2v2H7zm0 4h2v2H7zm0 4h2v2H7zM20.1 3H3.9c-.5 0-.9.4-.9.9v16.2c0 .4.4.9.9.9h16.2c.4 0 .9-.5.9-.9V3.9c0-.5-.5-.9-.9-.9zM19 19H5V5h14v14z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(ListAltOutlinedIcon)>
                    Jobs
                  </div>
                  <div
                    className="makeStyles-sidebarItem-16"
                  >
                    <ForwardRef(DescriptionOutlinedIcon)
                      className="makeStyles-sidebarListIcons-24"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="makeStyles-sidebarListIcons-24"
                      >
                        <ForwardRef(SvgIcon)
                          className="makeStyles-sidebarListIcons-24"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root makeStyles-sidebarListIcons-24"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M8 16h8v2H8zm0-4h8v2H8zm6-10H6c-1.1 0-2 .9-2 2v16c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(DescriptionOutlinedIcon)>
                    SeaDocs
                  </div>
                  <div
                    className="makeStyles-sidebarItem-16"
                  >
                    <ForwardRef(PermContactCalendarOutlinedIcon)
                      className="makeStyles-sidebarListIcons-24"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="makeStyles-sidebarListIcons-24"
                      >
                        <ForwardRef(SvgIcon)
                          className="makeStyles-sidebarListIcons-24"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root makeStyles-sidebarListIcons-24"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M20.84 4.22c-.05-.12-.11-.23-.18-.34-.14-.21-.33-.4-.54-.54-.11-.07-.22-.13-.34-.18-.24-.1-.5-.16-.78-.16h-1V1h-2v2H8V1H6v2H5c-.42 0-.8.13-1.12.34-.21.14-.4.33-.54.54-.07.11-.13.22-.18.34-.1.24-.16.5-.16.78v14c0 1.1.89 2 2 2h14c.28 0 .54-.06.78-.16.12-.05.23-.11.34-.18.21-.14.4-.33.54-.54.21-.32.34-.71.34-1.12V5c0-.28-.06-.54-.16-.78zM5 19V5h14v14H5zm7-6.12c-2.03 0-6 1.08-6 3.58V18h12v-1.53c0-2.51-3.97-3.59-6-3.59zM8.31 16c.69-.56 2.38-1.12 3.69-1.12s3.01.56 3.69 1.12H8.31zM12 12c1.65 0 3-1.35 3-3s-1.35-3-3-3-3 1.35-3 3 1.35 3 3 3zm0-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(PermContactCalendarOutlinedIcon)>
                    Connections
                  </div>
                </div>
              </div>
            </div>
          </HiddenCss>
        </WithStyles(HiddenCss)>
      </Hidden>
    </nav>
    <main
      className="makeStyles-content-10"
    >
      <div
        className="makeStyles-toolbar-8"
      />
      <div
        className="makeStyles-pageIntroBar-25"
      >
        <div
          className="makeStyles-pageTitle-27"
        >
          Jobs
        </div>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-pageNavButton-26"
          onClick={[Function]}
          variant="outlined"
        >
          <ForwardRef(Button)
            className="makeStyles-pageNavButton-26"
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            onClick={[Function]}
            variant="outlined"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-outlined makeStyles-pageNavButton-26"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-outlined makeStyles-pageNavButton-26"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-pageNavButton-26"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Add new job
                  </span>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
      <WithStyles(ForwardRef(Backdrop))
        className="makeStyles-backdrop-5"
        open={true}
      >
        <ForwardRef(Backdrop)
          className="makeStyles-backdrop-5"
          classes={
            Object {
              "invisible": "MuiBackdrop-invisible",
              "root": "MuiBackdrop-root",
            }
          }
          open={true}
        >
          <ForwardRef(Fade)
            in={true}
          >
            <Transition
              appear={true}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={
                Object {
                  "enter": 225,
                  "exit": 195,
                }
              }
              unmountOnExit={false}
            >
              <div
                aria-hidden={true}
                className="MuiBackdrop-root makeStyles-backdrop-5"
                style={
                  Object {
                    "opacity": 0,
                    "visibility": undefined,
                  }
                }
              >
                <WithStyles(ForwardRef(CircularProgress))
                  color="inherit"
                >
                  <ForwardRef(CircularProgress)
                    classes={
                      Object {
                        "circle": "MuiCircularProgress-circle",
                        "circleDeterminate": "MuiCircularProgress-circleDeterminate",
                        "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
                        "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
                        "circleStatic": "MuiCircularProgress-circleStatic",
                        "colorPrimary": "MuiCircularProgress-colorPrimary",
                        "colorSecondary": "MuiCircularProgress-colorSecondary",
                        "determinate": "MuiCircularProgress-determinate",
                        "indeterminate": "MuiCircularProgress-indeterminate",
                        "root": "MuiCircularProgress-root",
                        "static": "MuiCircularProgress-static",
                        "svg": "MuiCircularProgress-svg",
                      }
                    }
                    color="inherit"
                  >
                    <div
                      className="MuiCircularProgress-root MuiCircularProgress-indeterminate"
                      role="progressbar"
                      style={
                        Object {
                          "height": 40,
                          "width": 40,
                        }
                      }
                    >
                      <svg
                        className="MuiCircularProgress-svg"
                        viewBox="22 22 44 44"
                      >
                        <circle
                          className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                          cx={44}
                          cy={44}
                          fill="none"
                          r={20.2}
                          strokeWidth={3.6}
                          style={Object {}}
                        />
                      </svg>
                    </div>
                  </ForwardRef(CircularProgress)>
                </WithStyles(ForwardRef(CircularProgress))>
              </div>
            </Transition>
          </ForwardRef(Fade)>
        </ForwardRef(Backdrop)>
      </WithStyles(ForwardRef(Backdrop))>
      <WithStyles(ForwardRef(TableContainer))
        className="makeStyles-tableContainer-35"
      >
        <ForwardRef(TableContainer)
          className="makeStyles-tableContainer-35"
          classes={
            Object {
              "root": "MuiTableContainer-root",
            }
          }
        >
          <div
            className="MuiTableContainer-root makeStyles-tableContainer-35"
          >
            <WithStyles(ForwardRef(Table))
              className="makeStyles-tableMain-36"
            >
              <ForwardRef(Table)
                className="makeStyles-tableMain-36"
                classes={
                  Object {
                    "root": "MuiTable-root",
                    "stickyHeader": "MuiTable-stickyHeader",
                  }
                }
              >
                <table
                  className="MuiTable-root makeStyles-tableMain-36"
                  role={null}
                >
                  <WithStyles(ForwardRef(TableHead))
                    className="makeStyles-tableHead-37"
                  >
                    <ForwardRef(TableHead)
                      className="makeStyles-tableHead-37"
                      classes={
                        Object {
                          "root": "MuiTableHead-root",
                        }
                      }
                    >
                      <thead
                        className="MuiTableHead-root makeStyles-tableHead-37"
                        role={null}
                      >
                        <WithStyles(ForwardRef(TableRow))>
                          <ForwardRef(TableRow)
                            classes={
                              Object {
                                "footer": "MuiTableRow-footer",
                                "head": "MuiTableRow-head",
                                "hover": "MuiTableRow-hover",
                                "root": "MuiTableRow-root",
                                "selected": "Mui-selected",
                              }
                            }
                          >
                            <tr
                              className="MuiTableRow-root MuiTableRow-head"
                              role={null}
                            >
                              <WithStyles(ForwardRef(TableCell))
                                align="left"
                                className="makeStyles-tableHeadCell-39"
                                key="0"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "width": "20%",
                                  }
                                }
                              >
                                <ForwardRef(TableCell)
                                  align="left"
                                  className="makeStyles-tableHeadCell-39"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTableCell-alignCenter",
                                      "alignJustify": "MuiTableCell-alignJustify",
                                      "alignLeft": "MuiTableCell-alignLeft",
                                      "alignRight": "MuiTableCell-alignRight",
                                      "body": "MuiTableCell-body",
                                      "footer": "MuiTableCell-footer",
                                      "head": "MuiTableCell-head",
                                      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                      "paddingNone": "MuiTableCell-paddingNone",
                                      "root": "MuiTableCell-root",
                                      "sizeSmall": "MuiTableCell-sizeSmall",
                                      "stickyHeader": "MuiTableCell-stickyHeader",
                                    }
                                  }
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "20%",
                                    }
                                  }
                                >
                                  <th
                                    aria-sort={null}
                                    className="MuiTableCell-root MuiTableCell-head makeStyles-tableHeadCell-39 MuiTableCell-alignLeft"
                                    onClick={[Function]}
                                    scope="col"
                                    style={
                                      Object {
                                        "width": "20%",
                                      }
                                    }
                                  >
                                    JOB TITLE
                                  </th>
                                </ForwardRef(TableCell)>
                              </WithStyles(ForwardRef(TableCell))>
                              <WithStyles(ForwardRef(TableCell))
                                align="left"
                                className="makeStyles-tableHeadCell-39"
                                key="1"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "width": "20%",
                                  }
                                }
                              >
                                <ForwardRef(TableCell)
                                  align="left"
                                  className="makeStyles-tableHeadCell-39"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTableCell-alignCenter",
                                      "alignJustify": "MuiTableCell-alignJustify",
                                      "alignLeft": "MuiTableCell-alignLeft",
                                      "alignRight": "MuiTableCell-alignRight",
                                      "body": "MuiTableCell-body",
                                      "footer": "MuiTableCell-footer",
                                      "head": "MuiTableCell-head",
                                      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                      "paddingNone": "MuiTableCell-paddingNone",
                                      "root": "MuiTableCell-root",
                                      "sizeSmall": "MuiTableCell-sizeSmall",
                                      "stickyHeader": "MuiTableCell-stickyHeader",
                                    }
                                  }
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "20%",
                                    }
                                  }
                                >
                                  <th
                                    aria-sort={null}
                                    className="MuiTableCell-root MuiTableCell-head makeStyles-tableHeadCell-39 MuiTableCell-alignLeft"
                                    onClick={[Function]}
                                    scope="col"
                                    style={
                                      Object {
                                        "width": "20%",
                                      }
                                    }
                                  >
                                    STATUS
                                  </th>
                                </ForwardRef(TableCell)>
                              </WithStyles(ForwardRef(TableCell))>
                              <WithStyles(ForwardRef(TableCell))
                                align="left"
                                className="makeStyles-tableHeadCell-39"
                                key="2"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "width": "20%",
                                  }
                                }
                              >
                                <ForwardRef(TableCell)
                                  align="left"
                                  className="makeStyles-tableHeadCell-39"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTableCell-alignCenter",
                                      "alignJustify": "MuiTableCell-alignJustify",
                                      "alignLeft": "MuiTableCell-alignLeft",
                                      "alignRight": "MuiTableCell-alignRight",
                                      "body": "MuiTableCell-body",
                                      "footer": "MuiTableCell-footer",
                                      "head": "MuiTableCell-head",
                                      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                      "paddingNone": "MuiTableCell-paddingNone",
                                      "root": "MuiTableCell-root",
                                      "sizeSmall": "MuiTableCell-sizeSmall",
                                      "stickyHeader": "MuiTableCell-stickyHeader",
                                    }
                                  }
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "20%",
                                    }
                                  }
                                >
                                  <th
                                    aria-sort={null}
                                    className="MuiTableCell-root MuiTableCell-head makeStyles-tableHeadCell-39 MuiTableCell-alignLeft"
                                    onClick={[Function]}
                                    scope="col"
                                    style={
                                      Object {
                                        "width": "20%",
                                      }
                                    }
                                  >
                                    POSTED
                                  </th>
                                </ForwardRef(TableCell)>
                              </WithStyles(ForwardRef(TableCell))>
                              <WithStyles(ForwardRef(TableCell))
                                align="left"
                                className="makeStyles-tableHeadCell-39"
                                key="3"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "width": "20%",
                                  }
                                }
                              >
                                <ForwardRef(TableCell)
                                  align="left"
                                  className="makeStyles-tableHeadCell-39"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTableCell-alignCenter",
                                      "alignJustify": "MuiTableCell-alignJustify",
                                      "alignLeft": "MuiTableCell-alignLeft",
                                      "alignRight": "MuiTableCell-alignRight",
                                      "body": "MuiTableCell-body",
                                      "footer": "MuiTableCell-footer",
                                      "head": "MuiTableCell-head",
                                      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                      "paddingNone": "MuiTableCell-paddingNone",
                                      "root": "MuiTableCell-root",
                                      "sizeSmall": "MuiTableCell-sizeSmall",
                                      "stickyHeader": "MuiTableCell-stickyHeader",
                                    }
                                  }
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "20%",
                                    }
                                  }
                                >
                                  <th
                                    aria-sort={null}
                                    className="MuiTableCell-root MuiTableCell-head makeStyles-tableHeadCell-39 MuiTableCell-alignLeft"
                                    onClick={[Function]}
                                    scope="col"
                                    style={
                                      Object {
                                        "width": "20%",
                                      }
                                    }
                                  >
                                    APPLICANTS
                                  </th>
                                </ForwardRef(TableCell)>
                              </WithStyles(ForwardRef(TableCell))>
                              <WithStyles(ForwardRef(TableCell))
                                align="left"
                                className="makeStyles-tableHeadCell-39"
                                key="4"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "width": "20%",
                                  }
                                }
                              >
                                <ForwardRef(TableCell)
                                  align="left"
                                  className="makeStyles-tableHeadCell-39"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTableCell-alignCenter",
                                      "alignJustify": "MuiTableCell-alignJustify",
                                      "alignLeft": "MuiTableCell-alignLeft",
                                      "alignRight": "MuiTableCell-alignRight",
                                      "body": "MuiTableCell-body",
                                      "footer": "MuiTableCell-footer",
                                      "head": "MuiTableCell-head",
                                      "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                      "paddingNone": "MuiTableCell-paddingNone",
                                      "root": "MuiTableCell-root",
                                      "sizeSmall": "MuiTableCell-sizeSmall",
                                      "stickyHeader": "MuiTableCell-stickyHeader",
                                    }
                                  }
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "20%",
                                    }
                                  }
                                >
                                  <th
                                    aria-sort={null}
                                    className="MuiTableCell-root MuiTableCell-head makeStyles-tableHeadCell-39 MuiTableCell-alignLeft"
                                    onClick={[Function]}
                                    scope="col"
                                    style={
                                      Object {
                                        "width": "20%",
                                      }
                                    }
                                  >
                                    OPTIONS
                                  </th>
                                </ForwardRef(TableCell)>
                              </WithStyles(ForwardRef(TableCell))>
                            </tr>
                          </ForwardRef(TableRow)>
                        </WithStyles(ForwardRef(TableRow))>
                      </thead>
                    </ForwardRef(TableHead)>
                  </WithStyles(ForwardRef(TableHead))>
                </table>
              </ForwardRef(Table)>
            </WithStyles(ForwardRef(Table))>
          </div>
        </ForwardRef(TableContainer)>
      </WithStyles(ForwardRef(TableContainer))>
      <div
        className="makeStyles-endOfTable-45"
      >
        <ForwardRef(MoreHorizIcon)>
          <WithStyles(ForwardRef(SvgIcon))>
            <ForwardRef(SvgIcon)
              classes={
                Object {
                  "colorAction": "MuiSvgIcon-colorAction",
                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                  "colorError": "MuiSvgIcon-colorError",
                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                  "root": "MuiSvgIcon-root",
                }
              }
            >
              <svg
                aria-hidden={true}
                className="MuiSvgIcon-root"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                />
              </svg>
            </ForwardRef(SvgIcon)>
          </WithStyles(ForwardRef(SvgIcon))>
        </ForwardRef(MoreHorizIcon)>
      </div>
    </main>
  </div>
</BlogPage>
`;
